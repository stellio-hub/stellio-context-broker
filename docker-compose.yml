version: '3.9'
services:
  kafka:
    image: confluentinc/cp-kafka:7.2.0
    container_name: stellio-kafka
    hostname: stellio-kafka
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://stellio-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@stellio-kafka:29093'
      KAFKA_LISTENERS: CONTROLLER://stellio-kafka:29093,PLAINTEXT://stellio-kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    volumes:
      - ./config/kafka/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
  neo4j:
    image: neo4j:4.4
    container_name: stellio-neo4j
    volumes:
      - stellio-neo4j-storage:/data
    environment:
      - NEO4J_dbms_allow__upgrade=${NEO4J_ALLOW_UPGRADE}
      - NEO4J_dbms_default__database=${NEO4J_DEFAULT_DATABASE}
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*"
      - "NEO4J_dbms_security_procedures_allowlist=apoc.*"
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    # following https://github.com/neo4j/neo4j/issues/7203#issuecomment-898511474
    healthcheck:
      test: wget -qO- http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
  postgres:
    image: stellio/stellio-timescale-postgis:2.3.0-pg13
    container_name: stellio-postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "POSTGRES_MULTIPLE_DATABASES=${STELLIO_SEARCH_DB_DATABASE},${STELLIO_SEARCH_DB_USER},${STELLIO_SEARCH_DB_PASSWORD}: ${STELLIO_SUBSCRIPTION_DB_DATABASE},${STELLIO_SUBSCRIPTION_DB_USER},${STELLIO_SUBSCRIPTION_DB_PASSWORD}"
      # not sure it is really necessary but it does not break anything ...
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - stellio-postgres-storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
  api-gateway:
    container_name: stellio-api-gateway
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
    ports:
      - "8080:8080"
  entity-service:
    container_name: stellio-entity-service
    image: stellio/stellio-entity-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_DATA_NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - ORG_NEO4J_DRIVER_AUTHENTICATION_PASSWORD=${NEO4J_PASSWORD}
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - "8082:8082"
    depends_on:
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_started
  search-service:
    container_name: stellio-search-service
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SEARCH_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SEARCH_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
  subscription-service:
    container_name: stellio-subscription-service
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SUBSCRIPTION_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SUBSCRIPTION_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
      - APPLICATION_ENTITY_SERVICE-URL=${APPLICATION_ENTITY_SERVICE_URL}
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

volumes:
  stellio-neo4j-storage:
  stellio-postgres-storage:
