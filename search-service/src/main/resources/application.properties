spring.r2dbc.url=r2dbc:postgresql://localhost/stellio_search
spring.r2dbc.username=stellio_search
spring.r2dbc.password=stellio_search_db_password

# Required for Flyway to know where the DB is located
spring.flyway.url = jdbc:postgresql://localhost/stellio_search
spring.flyway.user = ${spring.r2dbc.username}
spring.flyway.password = ${spring.r2dbc.password}

# for now use a configured URL to address the registry service
# TODO : use Spring Cloud discovery later (or Swarm / k8s similar mechanisms)
application.entity-service.url = https://data-hub.eglobalmark.com/ngsi-ld/v1

application.authentication.enabled = false

# cf https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#specifying-the-authorization-server
spring.security.oauth2.resourceserver.jwt.issuer-uri = https://data-hub.eglobalmark.com/auth/realms/datahub
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = https://data-hub.eglobalmark.com/auth/realms/datahub/protocol/openid-connect/certs

spring.cloud.stream.kafka.binder.brokers = localhost:29092
spring.kafka.bootstrap-servers = localhost:29092

server.port = 8083

management.endpoints.enabled-by-default = false
management.endpoint.health.enabled = true

spring.http.log-request-details = true

# Default values for sending log data to a Gelf compatible endpoint
# Log data is sent only if the 'gelflogs' Spring profile is active
# application.graylog.host = localhost
# application.graylog.port = 12201
# application.graylog.source = stellio-int
