<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ClassNaming:V0_29_JsonLd_migrationTests.kt$V0_29_JsonLd_migrationTests</ID>
    <ID>ClassNaming:V0_29__JsonLd_migration.kt$V0_29__JsonLd_migration : BaseJavaMigration</ID>
    <ID>ComplexCondition:EntitiesQueryUtils.kt$geoQuery == null &amp;&amp; q.isNullOrEmpty() &amp;&amp; typeSelection.isNullOrEmpty() &amp;&amp; attrs.isEmpty() &amp;&amp; !local</ID>
    <ID>Filename:V0_29__JsonLd_migration.kt$db.migration.V0_29__JsonLd_migration.kt</ID>
    <ID>LongMethod:AttributeInstanceService.kt$AttributeInstanceService$@Transactional suspend fun create(attributeInstance: AttributeInstance): Either&lt;APIException, Unit&gt;</ID>
    <ID>LongMethod:EntityEventService.kt$EntityEventService$private fun publishAttributeChangeEvent( sub: String?, tenantName: String, originalEntity: ExpandedEntity, updatedEntity: ExpandedEntity, attributeOperationResult: SucceededAttributeOperationResult )</ID>
    <ID>LongMethod:EntityEventServiceTests.kt$EntityEventServiceTests$@Test fun `it should publish ATTRIBUTE_UPDATE events if a multi-attribute is replaced`()</ID>
    <ID>LongMethod:LinkedEntityServiceTests.kt$LinkedEntityServiceTests$@Test fun `it should inline entities up to the asked 2nd level`()</ID>
    <ID>LongMethod:PatchAttributeTests.kt$PatchAttributeTests.Companion$@JvmStatic fun mergePatchProvider(): Stream&lt;Arguments&gt;</ID>
    <ID>LongMethod:PatchAttributeTests.kt$PatchAttributeTests.Companion$@JvmStatic fun partialUpdatePatchProvider(): Stream&lt;Arguments&gt;</ID>
    <ID>LongMethod:PermissionHandlerTests.kt$PermissionHandlerTests$@Test fun `query Permissions with details=true should return entire entity and subject information`()</ID>
    <ID>LongMethod:TemporalEntityBuilder.kt$TemporalEntityBuilder$private fun buildAttributesSimplifiedRepresentation( attributeAndResultsMap: AttributesWithInstances, coreContext: String ): Map&lt;Attribute, SimplifiedTemporalAttribute&gt;</ID>
    <ID>LongMethod:TemporalQueryServiceTests.kt$TemporalQueryServiceTests$@Test fun `it should query temporal entities as requested by query params`()</ID>
    <ID>LongMethod:V0_29__JsonLd_migration.kt$V0_29__JsonLd_migration$override fun migrate(context: Context)</ID>
    <ID>LongParameterList:AttributeInstance.kt$AttributeInstance.Companion$( attributeUuid: UUID, instanceId: URI = generateRandomInstanceId(), timeAndProperty: Pair&lt;ZonedDateTime, TemporalProperty&gt;, value: Triple&lt;String?, Double?, WKTCoordinates?&gt;, payload: ExpandedAttributeInstance, sub: String? )</ID>
    <ID>LongParameterList:AttributeInstance.kt$AttributeInstance.Companion$( attributeUuid: UUID, instanceId: URI = generateRandomInstanceId(), timeProperty: TemporalProperty? = TemporalProperty.OBSERVED_AT, modifiedAt: ZonedDateTime? = null, attributeMetadata: AttributeMetadata, payload: ExpandedAttributeInstance, time: ZonedDateTime, sub: String? = null )</ID>
    <ID>LongParameterList:BusinessObjectsFactory.kt$( attributeUuid: UUID, timeProperty: AttributeInstance.TemporalProperty = AttributeInstance.TemporalProperty.OBSERVED_AT, measuredValue: Double? = Random.nextDouble(), value: String? = null, time: ZonedDateTime = ngsiLdDateTime(), sub: Sub? = null )</ID>
    <ID>LongParameterList:DistributedEntityProvisionService.kt$DistributedEntityProvisionService$( csrs: List&lt;ContextSourceRegistration&gt;?, csrFilters: CSRFilters, entity: ExpandedEntity, contexts: List&lt;String&gt;, resultToUpdate: BatchOperationResult, operation: Operation, )</ID>
    <ID>LongParameterList:EntitiesQuery.kt$EntitiesQuery$( open val q: String?, open val scopeQ: String?, open val paginationQuery: PaginationQuery, open val attrs: Set&lt;ExpandedTerm&gt;, open val datasetId: Set&lt;String&gt;, open val geoQuery: GeoQuery?, open val linkedEntityQuery: LinkedEntityQuery?, open val local: Boolean = false, open val contexts: List&lt;String&gt; )</ID>
    <ID>LongParameterList:PermissionHandler.kt$PermissionHandler$( expandedPermission: Permission, contexts: List&lt;String&gt;, mediaType: MediaType = JSON_LD_MEDIA_TYPE, includeSysAttrs: Boolean = false, includeDetails: Boolean = false, pickAttributes: Set&lt;String&gt; = emptySet() )</ID>
    <ID>LongParameterList:PermissionHandler.kt$PermissionHandler$( permissions: List&lt;Permission&gt;, contexts: List&lt;String&gt;, mediaType: MediaType = JSON_LD_MEDIA_TYPE, includeSysAttrs: Boolean, includeDetails: Boolean, pickDetailsAttributes: Set&lt;String&gt; = emptySet() )</ID>
    <ID>LongParameterList:TemporalEntityHandler.kt$TemporalEntityHandler$( @RequestHeader httpHeaders: HttpHeaders, @PathVariable entityId: URI, @PathVariable attrId: String, @PathVariable instanceId: URI, @RequestBody requestBody: Mono&lt;String&gt;, @AllowedParameters(notImplemented = [QP.LOCAL, QP.VIA]) @RequestParam queryParams: MultiValueMap&lt;String, String&gt; )</ID>
    <ID>LongParameterList:V0_29__JsonLd_migration.kt$V0_29__JsonLd_migration$( entityId: URI, attributeName: ExpandedTerm, datasetId: URI?, attributePayload: ExpandedAttributeInstance, ngsiLdAttributeInstance: NgsiLdAttributeInstance, defaultCreatedAt: ZonedDateTime )</ID>
    <ID>MaxLineLength:PermissionHandlerTests.kt$PermissionHandlerTests$"$permissionUri?targetId=$id&amp;action=${Action.OWN.value}&amp;assignee=assigneeId&amp;assigner=assignerId&amp;targetType=${BEEHIVE_TERM}"</ID>
    <ID>MaxLineLength:PermissionHandlerTests.kt$PermissionHandlerTests$fun</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEHIVE_IRI,$BEEKEEPER_IRI', '/A,/B' , '$beehiveWithScope,$beehiveTypeAndScopeA' , '$beekeeper,$scopeA,$beehiveType'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEHIVE_IRI,$BEEKEEPER_IRI', '/A,/B' , '$beehiveWithScope,$scopeA,$beehiveType,$beehiveTypeAndScopeA', '$beekeeper'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEHIVE_IRI,$BEEKEEPER_IRI', null , '$beekeeper,$beehiveWithScope,$beehiveType,$beehiveTypeAndScopeA', '$scopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEHIVE_IRI,$BEEKEEPER_IRI', null , '$beekeeper,$beehiveWithScope,$scopeA,$beehiveType,$beehiveTypeAndScopeA', null"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEKEEPER_IRI' , '/B' , null, '$beehiveType,$beekeeper,$beehiveWithScope,$scopeA,$beehiveTypeAndScopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEKEEPER_IRI' , null , '$beekeeper', '$beehiveWithScope,$beehiveType,$beehiveTypeAndScopeA,$scopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" '$BEEKEEPER_IRI' , null , '$beekeeper,$scopeA', '$beehiveWithScope,$beehiveType,$beehiveTypeAndScopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" null , '/A,/B' , '$beehiveWithScope,$scopeA,$beehiveType,$beehiveTypeAndScopeA', '$beekeeper'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" null , '/A,/B' , '$beehiveWithScope,$scopeA,$beehiveTypeAndScopeA', '$beekeeper,$beehiveType'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" null , '/B' , '$beehiveType', '$beekeeper,$beehiveWithScope,$scopeA,$beehiveTypeAndScopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$" null , '/B' , null, '$beehiveType,$beekeeper,$beehiveWithScope,$scopeA,$beehiveTypeAndScopeA'"</ID>
    <ID>MaxLineLength:PermissionServiceTests.kt$PermissionServiceTests$fun</ID>
    <ID>MaximumLineLength:PermissionHandlerTests.kt$PermissionHandlerTests$ </ID>
    <ID>MaximumLineLength:PermissionServiceTests.kt$PermissionServiceTests$ </ID>
    <ID>NestedBlockDepth:V0_29__JsonLd_migration.kt$V0_29__JsonLd_migration$override fun migrate(context: Context)</ID>
    <ID>SwallowedException:TemporalQueryUtils.kt$e: IllegalArgumentException</ID>
  </CurrentIssues>
</SmellBaseline>
