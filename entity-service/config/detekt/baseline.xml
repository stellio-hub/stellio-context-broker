<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:StandaloneAuthorizationService.kt$StandaloneAuthorizationService${}</ID>
    <ID>LongMethod:EntityAccessControlHandler.kt$EntityAccessControlHandler$@GetMapping("/entities", produces = [MediaType.APPLICATION_JSON_VALUE, JSON_LD_CONTENT_TYPE]) suspend fun getAuthorizedEntities( @RequestHeader httpHeaders: HttpHeaders, @RequestParam params: MultiValueMap&lt;String, String&gt; ): ResponseEntity&lt;*&gt;</ID>
    <ID>LongMethod:EntityAccessControlHandler.kt$EntityAccessControlHandler$@PostMapping("/sync") suspend fun syncIam(): ResponseEntity&lt;*&gt;</ID>
    <ID>LongMethod:EntityEventServiceTests.kt$EntityEventServiceTests$@Test fun `it should publish ATTRIBUTE_APPEND and ATTRIBUTE_REPLACE events if attributes were appended and replaced`()</ID>
    <ID>LongMethod:EntityHandler.kt$EntityHandler$ @GetMapping(produces = [MediaType.APPLICATION_JSON_VALUE, JSON_LD_CONTENT_TYPE]) suspend fun getEntities( @RequestHeader httpHeaders: HttpHeaders, @RequestParam params: MultiValueMap&lt;String, String&gt; ): ResponseEntity&lt;*&gt;</ID>
    <ID>LongMethod:EntityServiceTests.kt$EntityServiceTests$@Test fun `it should create a new multi attribute property`()</ID>
    <ID>LongMethod:Neo4jAuthorizationServiceTest.kt$Neo4jAuthorizationServiceTest$@Test fun `it should get and transform authorized entities into JSON-LD entities`()</ID>
    <ID>LongMethod:Neo4jRepositoryTests.kt$Neo4jRepositoryTests$@Test fun `it should retrieve details of attributes`()</ID>
    <ID>LongParameterList:AuthorizationService.kt$AuthorizationService$( queryParams: QueryParams, sub: Option&lt;Sub&gt;, offset: Int, limit: Int, includeSysAttrs: Boolean, contextLink: String )</ID>
    <ID>LongParameterList:EntityAccessControlHandlerTests.kt$EntityAccessControlHandlerTests$( id: String, type: String, right: String, specificAccessPolicy: String? = null, rCanReadUser: URI? = null, createdAt: String? = null, modifiedAt: String? = null, context: String )</ID>
    <ID>LongParameterList:EntityEventService.kt$EntityEventService$( sub: String?, entityId: URI, attributeName: String, datasetId: URI? = null, deleteAll: Boolean, contexts: List&lt;String&gt; )</ID>
    <ID>LongParameterList:EntityEventService.kt$EntityEventService$( sub: String?, entityId: URI, attributeName: String, datasetId: URI? = null, overwrite: Boolean, operationPayload: String, updateOperationResult: UpdateOperationResult, contexts: List&lt;String&gt; )</ID>
    <ID>LongParameterList:EntityService.kt$EntityService$( queryParams: QueryParams, sub: Option&lt;Sub&gt;, offset: Int, limit: Int, contextLink: String, includeSysAttrs: Boolean )</ID>
    <ID>LongParameterList:EntityService.kt$EntityService$( queryParams: QueryParams, sub: Option&lt;Sub&gt;, offset: Int, limit: Int, contexts: List&lt;String&gt;, includeSysAttrs: Boolean )</ID>
    <ID>MaxLineLength:Neo4jRepository.kt$Neo4jRepository$ MATCH (a:</ID>
    <ID>MaxLineLength:Neo4jRepository.kt$Neo4jRepository$ MATCH (entity:</ID>
    <ID>TooManyFunctions:AuthorizationService.kt$AuthorizationService</ID>
    <ID>TooManyFunctions:EntityService.kt$EntityService</ID>
    <ID>TooManyFunctions:Neo4jAuthorizationService.kt$Neo4jAuthorizationService : AuthorizationService</ID>
    <ID>TooManyFunctions:Neo4jRepository.kt$Neo4jRepository</ID>
    <ID>UnusedPrivateMember:EntityAccessControlHandlerTests.kt$EntityAccessControlHandlerTests$@MockkBean(relaxed = true) private lateinit var kafkaTemplate: KafkaTemplate&lt;String, String&gt;</ID>
    <ID>UnusedPrivateMember:EntityServiceTests.kt$EntityServiceTests$@MockkBean private lateinit var searchRepository: SearchRepository</ID>
    <ID>UnusedPrivateMember:Neo4jAuthorizationRepository.kt$Neo4jAuthorizationRepository$subjectId: URI</ID>
  </CurrentIssues>
</SmellBaseline>
